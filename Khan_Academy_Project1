/* CREATED BY: RUBY SMITH
CREATED ON: 07-10-2023
GOAL: FIRST SQL COURSE */

SELECT * 
FROM movies;
________________________________________________________________________________________________________________________________________
SELECT * 
FROM movies 
WHERE release_year > 2000 
ORDER BY release_year;
________________________________________________________________________________________________________________________________________
SELECT title 
FROM songs;
________________________________________________________________________________________________________________________________________
SELECT title 
FROM songs 
WHERE mood = "epic" OR released > 1990;
________________________________________________________________________________________________________________________________________
SELECT title 
FROM songs 
WHERE mood = "epic" AND released > 1990 AND duration < 240;
________________________________________________________________________________________________________________________________________
SELECT title 
FROM songs 
WHERE artist = "Queen";
________________________________________________________________________________________________________________________________________
SELECT name 
FROM artists 
WHERE genre = "Pop";
________________________________________________________________________________________________________________________________________
SELECT title 
FROM songs 
WHERE artist 
  IN (SELECT name FROM artists WHERE genre = "Pop");
________________________________________________________________________________________________________________________________________
SELECT author AS 'Author', SUM(words) AS 'total_words'
FROM books
GROUP BY Author
HAVING SUM(words) > 1000000;
________________________________________________________________________________________________________________________________________
SELECT author AS 'Author', AVG(words) AS 'Avg_Words'
FROM books
GROUP BY Author
HAVING AVG(words) > 150000; 
_______________________________________________________________________________________________________________________________________
Create your own store! Your store should sell one type of things, like clothing or bikes, whatever you want your store to specialize in. 
You should have a table for all the items in your store, and at least 5 columns for the kind of data you think you'd need to store. 
You should sell at least 15 items, and use select statements to order your items by price and show at least one statistic about the items.

CREATE TABLE Rubys_Store (id INTEGER PRIMARY KEY, clothing TEXT, color TEXT, price INTEGER, quantity INTEGER, sold INTEGER);

INSERT INTO Rubys_Store 
  VALUES (1, "shirt", "blue", 10.99, 3, 7);
INSERT INTO Rubys_Store 
  VALUES (2, "shirt", "green", 10.99, 1, 14);
INSERT INTO Rubys_Store 
  VALUES (3, "hat", "gray", 14.99, 2, 1);
INSERT INTO Rubys_Store 
  VALUES (4, "hat", "yellow", 22.99, 1, 3);
INSERT INTO Rubys_Store 
  VALUES (5, "shirt", "tie dye", 14.99, 3, 9);
INSERT INTO Rubys_Store 
  VALUES (6, "shirt", "tie dye blue", 14.99, 4, 11);
INSERT INTO Rubys_Store 
  VALUES (7, "jeans", "white wash", 34.99, 6, 17);
INSERT INTO Rubys_Store 
  VALUES (8, "jeans", "dark blue", 33.99, 4, 14);
INSERT INTO Rubys_Store 
  VALUES (9, "jean shorts", "white wash", 27.99, 6, 7);
INSERT INTO Rubys_Store 
  VALUES (10, "shirt", "long sleeve orange", 21.99, 2, 16);
INSERT INTO Rubys_Store 
  VALUES (11, "flip flops", "orange", 10.99, 7, 23);
INSERT INTO Rubys_Store 
  VALUES (12, "flip flops", "baby blue", 10.99, 8, 13);
INSERT INTO Rubys_Store 
  VALUES (13, "flip flops", "pink", 10.99, 6, 21);
INSERT INTO Rubys_Store 
  VALUES (14, "shoes", "happy friends", 13.99, 3, 14);
INSERT INTO Rubys_Store 
  VALUES (15, "shirt", "purple", 16.99, 3, 21);
________________________________________________________________________________________________________________________________________
SELECT * FROM 
  Rubys_Store;
________________________________________________________________________________________________________________________________________
SELECT 
  SUM(sold) 
FROM 
  Rubys_Store;
________________________________________________________________________________________________________________________________________
SELECT 
  clothing, price 
FROM 
  Rubys_Store 
WHERE 
  price > 20.00 
ORDER BY 
  price;
________________________________________________________________________________________________________________________________________
SELECT
    NAME, NUMBER_GRADE, ROUND(FRACTION_COMPLETED * 100) as "PERCENT_COMPLETED"
FROM
    STUDENT_GRADES;
    
SELECT
    COUNT(*) AS "STUDENTS",
    CASE
        WHEN NUMBER_GRADE > 90 THEN 'A'
        WHEN NUMBER_GRADE > 80 THEN 'B'
        WHEN NUMBER_GRADE > 70 THEN 'C'
        ELSE 'F'
        END AS "LETTER_GRADE"
FROM
    STUDENT_GRADES
GROUP BY 
    LETTER_GRADE;
____________________________________________________________________________________________________________________
COPIED ((TABLE ONLY)) FROM https://gist.github.com/pamelafox/26b9357c6120d3d0d27c2b90c950e8c6

/* POKEMON STATISTICS FROM FIRST 151 POKEMON */

CREATE TABLE pokemon(
  Number     INTEGER,
  Name       TEXT PRIMARY KEY,
  Type_1     TEXT,
  Type_2     TEXT,
  Total      INTEGER,
  HP         INTEGER,
  Attack     INTEGER,
  Defense    INTEGER,
  Sp_Atk     INTEGER,
  Sp_Def     INTEGER,
  Speed      INTEGER,
  Generation INTEGER,
  Legendary  TEXT
);

INSERT INTO pokemon(Number,Name,Type_1,Type_2,Total,HP,Attack,Defense,Sp_Atk,Sp_Def,Speed,Generation,Legendary) VALUES (1,'Bulbasaur','Grass','Poison',318,45,49,49,65,65,45,1,'False');
INSERT INTO pokemon(Number,Name,Type_1,Type_2,Total,HP,Attack,Defense,Sp_Atk,Sp_Def,Speed,Generation,Legendary) VALUES (2,'Ivysaur','Grass','Poison',405,60,62,63,80,80,60,1,'False');
ETC.
________________________________________________________________________________________________________________________________________
SELECT 
    ROUND(AVG(total),1) AS 'avg_total',
    ROUND(AVG(HP),1) AS 'avg_HP',
    ROUND(AVG(Attack),1) AS 'avg_attack',
    ROUND(AVG(Defense),1) AS 'avg_defense',
    ROUND(AVG(Sp_Atk),1) AS 'avg_Sp_Atk',
    ROUND(AVG(Sp_Def),1) AS 'avg_def',
    ROUND(AVG(Speed),1) AS 'avg_speed'
FROM pokemon;
________________________________________________________________________________________________________________________________________
SELECT 
    MAX(total) AS 'Max_total',
    MAX(HP) AS 'Max_HP',
    MAX(Attack) AS 'Max_attack',
    MAX(Defense) AS 'Max_defense',
    MAX(Sp_Atk) AS 'Max_Sp_Atk',
    MAX(Sp_Def) AS 'Max_def',
    MAX(Speed) AS 'Max_speed'
FROM pokemon;
________________________________________________________________________________________________________________________________________
SELECT 
    MIN(total) AS 'Min_total',
    MIN(HP) AS 'Min_HP',
    MIN(Attack) AS 'Min_attack',
    MIN(Defense) AS 'Min_defense',
    MIN(Sp_Atk) AS 'Min_Sp_Atk',
    MIN(Sp_Def) AS 'Min_def',
    MIN(Speed) AS 'Min_speed'
FROM pokemon;
________________________________________________________________________________________________________________________________________
/* THIS TABLE SHOWS THE TOP 5 STRONGEST TYPE_1 GROUPS THAT HAVE A HIGHER TOTAL AVERAGE THAN THE OVERALL AVERAGE OF 425.8 */
SELECT 
    Type_1 AS 'Pokemon Type', 
    COUNT(Type_1) AS 'Number of Pokemon', 
    ROUND(AVG(Total),1) AS 'Avg Total Stats' 
FROM 
    pokemon
GROUP BY 
    Type_1
HAVING
    AVG(Total) >= 425.8
ORDER BY
    AVG(total) DESC
LIMIT(5);
 ________________________________________________________________________________________________________________________________________   
/* THIS TABLE SHOWS HOW FAST EACH POKEMON IS BY GROUPING THE SPEED STAT WITH A CASE STATEMENT */
SELECT
    number, 
    name, 
    Total AS 'Total_Stats', 
    Speed AS 'Speed_Stat',
    CASE
        WHEN speed <= 70 THEN 'Slow'
        WHEN speed <= 85 THEN 'Average'
        WHEN speed <= 110 THEN 'Fast'
        ELSE 'Fastest'
        END AS 'Speed'
FROM
    Pokemon
ORDER BY
    number;
________________________________________________________________________________________________________________________________________    
/* THIS TABLE SHOWS THE AVERAGE SIGHTING OF EACH TYPE_1 OF POKEMON WITH A CASE STATEMENT */
SELECT
    type_1 AS 'Main Typing', 
    Count(type_1) AS 'Number of Pokemon',
    CASE
        WHEN Count(type_1) <= 5 THEN 'Rare'
        WHEN Count(type_1) <= 20 THEN 'Average'
        ELSE 'Numerous'
        END AS 'Type Sightings'
FROM
    pokemon
GROUP BY
    type_1;
________________________________________________________________________________________________________________________________________
 /*THIS TABLE SHOWS ALL POKEMON THAT ARE PSYCHIC AND NOT LEGENDARY*/   
SELECT 
   number,
   name,
   type_1,
   type_2,
   total
FROM
    pokemon
WHERE legendary LIKE 'false' AND (type_1 LIKE 'psychic' OR type_2 LIKE 'psychic')
ORDER BY
    total DESC;
________________________________________________________________________________________________________________________________________
INSERT INTO persons (name, age) VALUES ("Abe Smith", 9);
INSERT INTO hobbies (person_id, name) VALUES (6, "video games");


SELECT 
  persons.name, 
  hobbies.name 
FROM 
  persons
JOIN 
  hobbies
ON 
  hobbies.person_id = persons.id; 

SELECT 
  persons.name, 
  hobbies.name 
FROM 
  persons
JOIN 
  hobbies
ON 
  hobbies.person_id = persons.id
WHERE 
  persons.name LIKE "Bobby McBobbyFace";

_____________________________________________________________________________________________________________________
SELECT 
  customers.name, 
  customers.email, 
  orders.item, 
  orders.price
FROM 
  customers
LEFT OUTER JOIN 
  orders
ON 
  customers.id = orders.customer_id;

SELECT 
  customers.name, 
  customers.email, 
  TOTAL(orders.price)
FROM 
  customers
LEFT OUTER JOIN 
  orders
ON 
  customers.id = orders.customer_id
GROUP BY 
  customers.name
ORDER BY 
  TOTAL(orders.price) DESC;

_______________________________________________________________________________________________________________
SELECT
  movies.title AS 'Movie Title', 
  s.title AS 'Sequel Title'
FROM 
  movies
LEFT OUTER JOIN 
  movies s 
ON 
  movies.sequel_id = s.id; 

_______________________________________________________________________________________________________________

SELECT 
  persons.fullname, 
  hobbies.name
FROM 
  persons
JOIN 
  hobbies
ON 
  persons.id = hobbies.person_id; 


SELECT 
  a.fullname,  
  b.fullname
FROM 
  friends
JOIN 
  persons a
ON 
  a.id = friends.person1_id
JOIN  
  persons b
ON 
  b.id = friends.person2_id;

_______________________________________________________________________________________________________________

CREATE TABLE 
  Movie_Stars (id INTEGER PRIMARY KEY, fullname TEXT, age INTEGER);

INSERT INTO Movie_Stars (fullname, age) VALUES ('Daniel Radcliff', 33);
INSERT INTO Movie_Stars (fullname, age) VALUES ('Robert Downey Jr.', 58);
INSERT INTO Movie_Stars (fullname, age) VALUES ('Emma Watson', 33);
INSERT INTO Movie_Stars (fullname, age) VALUES ('Johnny Depp', 60);
INSERT INTO Movie_Stars (fullname, age) VALUES ('Chris Evans', 42);
INSERT INTO Movie_Stars (fullname, age) VALUES ('Jennifer Lawrence', 32);


CREATE TABLE 
  Movies (id INTEGER PRIMARY KEY, Star_id INTEGER, Movie TEXT);

INSERT INTO Movies (Star_id, Movie) VALUES (1, 'Harry Potter and the Chamber of Secrets');
INSERT INTO Movies (Star_id, Movie) VALUES (1, 'The Lost City');
INSERT INTO Movies (Star_id, Movie) VALUES (2, 'Iron Man');
INSERT INTO Movies (Star_id, Movie) VALUES (2, 'Sherlock Holmes');
INSERT INTO Movies (Star_id, Movie) VALUES (1, 'Harry Potter and the Deathly Hallows');
INSERT INTO Movies (Star_id, Movie) VALUES (3, 'Harry Potter and the Chamber of Secrets');
INSERT INTO Movies (Star_id, Movie) VALUES (5, 'Captain America');
INSERT INTO Movies (Star_id, Movie) VALUES (4, 'Charlie and the Chocolate Factory');
INSERT INTO Movies (Star_id, Movie) VALUES (4, 'Blow');
INSERT INTO Movies (Star_id, Movie) VALUES (5, 'Avengers');
INSERT INTO Movies (Star_id, Movie) VALUES (4, 'Pirates of the Caribbean');
INSERT INTO Movies (Star_id, Movie) VALUES (3, 'Beauty and the Beast');
INSERT INTO Movies (Star_id, Movie) VALUES (6, 'Hunger Games');
INSERT INTO Movies (Star_id, Movie) VALUES (2, 'Avengers');
INSERT INTO Movies (Star_id, Movie) VALUES (6, 'X-Men: First Class');

CREATE TABLE 
  Costars (id INTEGER PRIMARY KEY, Costar1_id INTEGER, Costar2_id INTEGER);

INSERT INTO Costars (Costar1_id, Costar2_id) VALUES (2, 5);
INSERT INTO Costars (Costar1_id, Costar2_id) VALUES (1, 3);

SELECT * 
  FROM Movie_Stars;
SELECT * 
  FROM Movies;

SELECT 
  Movie_Stars.fullname AS 'Actor/Actress' , Movies.Movie AS 'Title'
FROM 
  Movie_Stars
JOIN 
  Movies
ON 
  Movie_Stars.id = Movies.Star_id
ORDER BY 
  Movie_Stars.fullname ASC;

SELECT 
  a.fullname AS 'Costar A', b.fullname AS 'Costar B'
FROM 
  costars
JOIN 
  Movie_stars a
ON 
  costars.costar1_id = a.id
JOIN 
  Movie_stars b
ON 
  costars.costar2_id = b.id;

_____________________________________________________________________________________________

SELECT * 
  FROM documents;

UPDATE documents 
  SET author = 'Jackie Draper' 
WHERE 
  Author = 'Jackie Paper';

SELECT * 
  FROM documents;

DELETE FROM documents
WHERE 
  id = 5;

SELECT * 
  FROM documents;

__________________________________________________________________________________________________
ALTER TABLE clothes 
  ADD 'price' INTEGER;

SELECT * 
  FROM clothes;

UPDATE clothes SET price = 10
    WHERE id=1;
UPDATE clothes SET price = 20
    WHERE id=2;
UPDATE clothes SET price = 30
    WHERE id=3;

SELECT * 
  FROM clothes;

INSERT INTO clothes ('type', design, price) 
  VALUES ('blouse', 'blue silk button up', 25);

SELECT * 
  FROM clothes;

______________________________________________________________________________________________________
CREATE TABLE achievements (id INTEGER PRIMARY KEY AUTOINCREMENT, game_title TEXT, achievement_title TEXT, points INTEGER);

INSERT INTO achievements (game_title, achievement_title, points) 
  VALUES ('Grounded', 'Landed', 10);
INSERT INTO achievements (game_title, achievement_title, points) 
  VALUES ('Halo 4', 'Blarg', 35);
INSERT INTO achievements (game_title, achievement_title, points) 
  VALUES ('Halo 4', 'Bringin Home the Bacon', 50);
INSERT INTO achievements (game_title, achievement_title, points) 
  VALUES ('Minecraft', 'You died....again', 10);
INSERT INTO achievements (game_title, achievement_title, points) 
  VALUES ('Minecraft', 'Trading around', 10);
INSERT INTO achievements (game_title, achievement_title, points) 
  VALUES ('Minecraft', 'Bling Bling', 25);
INSERT INTO achievements (game_title, achievement_title, points) 
  VALUES ('DeadSpace 2', 'Get away from me', 10);
INSERT INTO achievements (game_title, achievement_title, points) 
  VALUES ('Deadspace 2', '1000th kill', 50);

SELECT * 
  FROM achievements;

UPDATE achievements SET achievement_title = "Kick the Baby!"
    WHERE id = 7;

SELECT * 
  FROM achievements;

UPDATE achievements SET points = 25
    WHERE id = 7;

SELECT * 
  FROM achievements;

DELETE FROM achievements WHERE id = 1;

SELECT * 
  FROM achievements;
